import sys
sys.path.insert(0, '/home/m3/Desktop/ReRAM_test/scripts/common')
import os
from numpy import arange
import bisect
from decimal import *
import numpy
import math
from scipy import stats as scistats
import csv
from scipy.ndimage.filters import correlate as convolveim
import copy
from HuffmanCoding_weights import HuffmanCoding

import architecture as arch 
import network as net 
from split_func import *
from writer_func import *
from mem_func import *
from cnn_func import *
from inst_func import *
from USB_func import *

numpy.random.seed(9001)
arch.rram_mode = 1 

arch.init_rram_mem()
arch.init_inst_mem()
#arch.init_shared_mem()


USB_init_constant()

#USB_init_pe_idx_all()

inst_begin, inst_end = gen_conv_inst_ia_split(net.conv_1, 0, 16384, arch.RRAM_words_full, arch.num_pe)
gen_conv_input_ia_split(net.conv_1, 0, 2, arch.RRAM_words, arch.RRAM_words_full, arch.num_pe)
init_ia_word_list = build_share_mem([net.conv_1.ia], [0])
#
USB_init_pe_inst_all(inst_begin, inst_end)
#USB_init_w_huffman_shared()
#USB_init_loc_huffman_shared()
#USB_init_shared(init_ia_word_list)
#USB_init_icache_all()

#USB_read_constant()
#USB_read_shared(0, 256, 0)

write_rram_mem(arch.RRAM_words, arch.RRAM_words_full)
write_inst_mem()
#USB_init_RRAM_all()
#USB_init_RRAM_word(2, 0, 8256)
#for i in range(0, 1024):
#    USB_dummy_short()
#USB_init_RRAM_word(1, 0, 8512)
#for i in range(0, 1024):
#    USB_dummy_short()
#USB_init_RRAM_word(1, 0, 8260)
#USB_init_RRAM_single(1)

for i in range(0, 1024):
    USB_dummy_short()

for i in range(0, 10000):
    USB_read_RRAM(1, 0, 8256, 8256, 0)
    USB_dummy_short()
    USB_read_RRAM(1, 0, 8260, 8260, 0)
    USB_dummy_short()
    USB_read_RRAM(1, 0, 8512, 8512, 0)
    USB_dummy_short()

#USB_start_CNN()

USB_dummy_long()

